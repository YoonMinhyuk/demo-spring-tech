import java.nio.charset.StandardCharsets

plugins {
    id 'org.springframework.boot' version '2.4.0' apply false
    id 'io.spring.dependency-management' version '1.0.10.RELEASE' apply false
    id 'org.asciidoctor.convert' version '1.5.8' apply false
    id 'java-library'
}

subprojects {
    apply(plugin: 'org.springframework.boot')
    apply(plugin: 'io.spring.dependency-management')
    apply(plugin: 'java-library')

    group = 'me.demo'
    version = '1.0.0'
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15

    final IS_BASIC_MODULE = project.name.contains('basic')
    final IS_EUREKA_SERVER = project.name == 'eureka-server'
    final IS_API_GATEWAY = project.name == 'zuul-gateway'
    final IS_DOMAIN_MODULE = project.name.endsWith('domain')
    final IS_WEB_MODULE = project.name.endsWith('web')

    configurations {
        all {
            if (!IS_EUREKA_SERVER && !IS_API_GATEWAY) {
                exclude group: 'org.springframework.boot', module: 'spring-boot-starter-web'
            }
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }

    // COMMON
    dependencies {
        // spring
        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

        // lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    // WEB
    if (IS_WEB_MODULE) {
        apply(plugin: 'org.asciidoctor.convert')
        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-webflux'
            implementation 'org.springframework.boot:spring-boot-starter-hateoas'
            implementation 'org.springframework.boot:spring-boot-starter-validation'
            testImplementation 'io.projectreactor:reactor-test'
            asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
            testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
        }

        if (!IS_BASIC_MODULE) {
            ext {
                set('snippetsDir', file("build/generated-snippets"))
            }

            test {
                outputs.dir(snippetsDir)
                useJUnitPlatform()
            }

            asciidoctor {
                dependsOn test
                inputs.dir(snippetsDir)
            }

            bootJar {
                dependsOn asciidoctor
                from("${asciidoctor.outputDir}/html5") {
                    into 'static/docs'
                }
            }

            dependencies {
                implementation project(':basic-web')
            }
        }

        RestDocsConfigurer.of(project).initRestDocs()
    }

    // DOMAIN
    if (IS_DOMAIN_MODULE) {
        bootJar {
            enabled = false
        }

        jar {
            enabled = true
        }

        if (!IS_BASIC_MODULE) {
            dependencies {
                api project(':basic-domain')
            }
        }

        dependencies {
            runtimeOnly 'com.h2database:h2'
            implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
            implementation 'com.querydsl:querydsl-jpa'
            // Querydsl JPAAnnotationProcessor 지정
            annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa")
            //java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응
            annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
            //java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
            annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
        }
    }
}


class RestDocsConfigurer {
    private static final REST_API_GUIDE_FILE_PATH = 'src/docs/asciidoc/rest-api-guide.adoc'
    private static final REST_API_GUIDE_FILE_CONTENT =
            "= REST API GUIDE\n" +
                    ":author: \n" +
                    ":doctype: book\n" +
                    ":app-name: \n" +
                    ":toc: left\n" +
                    ":toclevels: 5\n" +
                    ":toc-title: 목차\n" +
                    "\n" +
                    "[[overview]]\n" +
                    "== 개요"

    private static final String CUSTOM_SNIPPETS_DIR_PATH = 'src/test/resources/org/springframework/restdocs/templates/asciidoctor'
    private static final Map<String, String> CUSTOM_SNIPPETS = new HashMap<>();

    static {
        CUSTOM_SNIPPETS.put(
                'request-fields.snippet',
                "|===\n" +
                        "|Path|Type|Optional|Description\n" +
                        "\n" +
                        "{{#fields}}\n" +
                        "|{{#tableCellContent}}`+{{path}}+`{{/tableCellContent}}\n" +
                        "|{{#tableCellContent}}`+{{type}}+`{{/tableCellContent}}\n" +
                        "|{{#tableCellContent}}{{optional}}{{/tableCellContent}}\n" +
                        "|{{#tableCellContent}}{{description}}{{/tableCellContent}}\n" +
                        "\n" +
                        "{{/fields}}\n" +
                        "|==="
        )

        CUSTOM_SNIPPETS.put(
                'request-parameters.snippet',
                "|===\n" +
                        "|Parameter|Optional|Description\n" +
                        "\n" +
                        "{{#parameters}}\n" +
                        "|{{#tableCellContent}}`+{{name}}+`{{/tableCellContent}}\n" +
                        "|{{#tableCellContent}}{{optional}}{{/tableCellContent}}\n" +
                        "|{{#tableCellContent}}{{description}}{{/tableCellContent}}\n" +
                        "\n" +
                        "{{/parameters}}\n" +
                        "|==="
        )
    }

    private final Project project

    private RestDocsConfigurer(final Project project) {
        this.project = project
    }

    static RestDocsConfigurer of(final Project project) {
        return new RestDocsConfigurer(project)
    }

    void initRestDocs() {
        this.initRequestApiGuideAdoc()
        this.initCustomSnippets()
    }

    private void initRequestApiGuideAdoc() {
        def restApiGuideFile = project.file(REST_API_GUIDE_FILE_PATH)
        if (!restApiGuideFile.exists()) {
            restApiGuideFile.parentFile.mkdirs()
            restApiGuideFile.createNewFile()
            restApiGuideFile.append(REST_API_GUIDE_FILE_CONTENT, StandardCharsets.UTF_8.displayName())
        }
    }

    private void initCustomSnippets() {
        def customSnippetsDir = project.file(CUSTOM_SNIPPETS_DIR_PATH)
        if (!customSnippetsDir.exists()) {
            customSnippetsDir.mkdirs()
        }

        CUSTOM_SNIPPETS.forEach { snippetFileName, content ->
            def snippet = project.file(CUSTOM_SNIPPETS_DIR_PATH.concat(snippetFileName.startsWith('/') ? snippetFileName : "/${snippetFileName}"))
            if (!snippet.exists()) {
                snippet.createNewFile()
                snippet.append(content, StandardCharsets.UTF_8.displayName())
            }
        }
    }
}
